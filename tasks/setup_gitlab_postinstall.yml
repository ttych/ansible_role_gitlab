---

- name: stat .gitlab:setup.done
  stat:
    path: "{{ gitlab_gitlab_dir }}/.gitlab:setup.done"
  register: t_gitlab_setup_done_stat


- block:
    - name: stat root password file
      stat:
        path: "{{ gitlab_gitlab_root_password_file }}"
      register: t_gitlab_setup_root_password_stat

    - block:
        - name: reload root password
          slurp:
            src: "{{ gitlab_gitlab_root_password_file }}"
          register: t_gitlab_setup_root_password

        - name: set gitlab_setup_root_password
          set_fact:
            gitlab_setup_root_password: "{{ t_gitlab_setup_root_password['content'] | b64decode }}"
      when: t_gitlab_setup_root_password_stat.stat.exists

    - block:
        - name: generate root password
          command: apg -m 30 -n 1
          changed_when: no
          register: t_gitlab_setup_root_password

        - name: set gitlab_setup_root_password
          set_fact:
            gitlab_setup_root_password: "{{ t_gitlab_setup_root_password.stdout }}"

        - name: save root password
          copy:
            content: "{{ gitlab_setup_root_password }}"
            dest: "{{ gitlab_gitlab_root_password_file }}"
            mode: "0600"
            owner: "{{ gitlab_user }}"
            group: "{{ gitlab_group }}"

      when: not t_gitlab_setup_root_password_stat.stat.exists

    # - name: run db:create
    #   command: "bundle exec rake db:create RAILS_ENV=production force=yes"
    #   args:
    #     chdir: "{{ gitlab_gitlab_dir }}"
    #   environment:
    #     PATH: "{{ gitlab_build_PATH }}"
    #   become: yes
    #   become_user: "{{ gitlab_user }}"

    - name: run db:setup
      command: "bundle exec rake db:setup RAILS_ENV=production force=yes"
      args:
        chdir: "{{ gitlab_gitlab_dir }}"
      environment:
        PATH: "{{ gitlab_build_PATH }}"
      become: yes
      become_user: "{{ gitlab_user }}"

    # - name: run db setup
    #   command: "bundle exec rake gitlab:db:configure RAILS_ENV=production force=yes GITLAB_ROOT_PASSWORD='{{ gitlab_setup_root_password }}' GITLAB_ROOT_EMAIL='{{ gitlab_root_email }}'"
    #   args:
    #     chdir: "{{ gitlab_gitlab_dir }}"
    #   environment:
    #     PATH: "{{ gitlab_build_PATH }}"
    #   become: yes
    #   become_user: "{{ gitlab_user }}"

    - name: Initialize Database and Activate Advanced Features
      command: "bundle exec rake gitlab:setup RAILS_ENV=production force=yes GITLAB_ROOT_PASSWORD='{{ gitlab_setup_root_password }}' GITLAB_ROOT_EMAIL='{{ gitlab_root_email }}' DISABLE_DATABASE_ENVIRONMENT_CHECK=1"
      args:
        chdir: "{{ gitlab_gitlab_dir }}"
      environment:
        PATH: "{{ gitlab_build_PATH }}"
      become: yes
      become_user: "{{ gitlab_user }}"

    - name: set flag for gitlab:setup done
      file:
        path: "{{ gitlab_gitlab_dir }}/.gitlab:setup.done"
        owner: "{{ gitlab_user }}"
        group: "{{ gitlab_group }}"
        mode: "0644"
        state: touch

  when: not t_gitlab_setup_done_stat.stat.exists


- name: check db migration status
  command: "bundle exec rake db:migrate:status RAILS_ENV=production"
  args:
    chdir: "{{ gitlab_gitlab_dir }}"
  environment:
    PATH: "{{ gitlab_build_PATH }}"
  changed_when: no
  become: yes
  become_user: "{{ gitlab_user }}"
  register: t_gitlab_db_migrate_status

- block:
    - name: run db migration
      command: "bundle exec rake db:migrate RAILS_ENV=production"
      args:
        chdir: "{{ gitlab_gitlab_dir }}"
      environment:
        PATH: "{{ gitlab_build_PATH }}"
      become: yes
      become_user: "{{ gitlab_user }}"

  when: t_gitlab_db_migrate_status.rc != 0
